import os
import re
from random import choice

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    Message
)

from data_base import create_or_update_account
from keybords import (
    level_keyboard,
    time_keyboard,
    done_or_not_keyboard,
    power_keyboard
)
from main import UserFMS

router = Router()


@router.message(CommandStart())
async def command_start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."""

    keybord = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text='–° –∫–∞–π—Ñ–æ–º)', callback_data='registration'
            )],
            [InlineKeyboardButton(
                text='–ß—Ç–æ –∑–∞ –∫—Ä–∏–Ω–≥–µ? üò≤', callback_data='about'
            )]

        ]
    )
    user_name = message.from_user.first_name if message.from_user else 'User'
    await message.answer(
        text=f'–ó–¥–∞—Ä–æ–≤–∞, {user_name}.\n'
        '–ï—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–∫–∞—á–∞—Ç—å –≥—Ä—É–¥—å.',
        reply_markup=keybord
    )


@router.callback_query(
        lambda cq: cq.data in ['registration', 'about']
)
async def offer_of_registration(
    callback_query: CallbackQuery
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞."""

    keyboard_fixed = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text='–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å', callback_data='fixed_result'
            )]
        ]
    )
    keyboard_registration = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text='–û–∫–µ–π!)', callback_data='registration'
            )]
        ]
    )
    selected_option = callback_query.data
    if selected_option == 'registration':
        await callback_query.message.edit_text(
            text='–î–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –º–Ω–µ –Ω—É–∂–Ω–æ, '
            '—á—Ç–æ–±—ã —Ç—ã –æ—Ç–∂–∞–ª—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –æ—Ç –ø–æ–ª–∞ '
            '–∑–∞ –æ–¥–∏–Ω –ø–æ–¥—Ö–æ–¥.\n<b>–Ø –∑–∞—Ñ–∏–∫—Å–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b>. '
            '–ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ—É–¥–æ–±–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å - –æ—Ç–æ–∂–º–∏—Å—å –ø–æ–∑–∂–µ.\n'
            '\n<tg-spoiler><b>–Ø –Ω–∏–∫—É–¥–∞ –Ω–µ –¥–µ–Ω—É—Å—å)</b></tg-spoiler>',
            reply_markup=keyboard_fixed
        )
    if selected_option == 'about':
        await callback_query.message.edit_text(
            text='–ó–¥–µ—Å—å –±—É–¥–µ—Ç README',
            reply_markup=keyboard_registration
        )


@router.callback_query(lambda cq: cq.data == 'fixed_result')
async def registration_process(
    callback_query: CallbackQuery
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback —Ñ–∏–∫—Å–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏."""

    await callback_query.message.edit_text(
        text='–í—ã–±–µ—Ä–∏ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–ª–æ–¥–≥–æ—Ç–æ–≤–∫–∏ üëá',
        reply_markup=level_keyboard()
    )


@router.callback_query(lambda cq: cq.data.startswith('level_'))
async def process_level_selection(
    callback_query: CallbackQuery,
    state: FSMContext
):
    "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."

    await state.set_state(state=UserFMS.level)
    data = str(callback_query.data)
    level = int(re.findall(r'\d+', data)[0])
    await state.update_data(level=level)
    keybord = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text='–¥–∞', callback_data='notification_yes'
            )],
            [InlineKeyboardButton(
                text='–Ω–µ—Ç', callback_data='notification_no'
            )]
        ]
    )
    data = await state.get_data()
    notification = data.get('notification')
    if not notification:
        await callback_query.message.edit_text(
            text='–•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?',
            reply_markup=keybord
        )
    if notification:
        user_data = await state.get_data()
        level = user_data.get('level')
        notification_time = user_data.get('notification_time')
        await callback_query.message.edit_text(
            text='–¢–∞–∫ –Ω–æ—Ä–º?\n'
            f'–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {level}\n–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_time}',
            reply_markup=done_or_not_keyboard()
            )


@router.callback_query(
        lambda cq: cq.data in ['notification_yes', 'notification_no']
)
async def process_notification_selection(
    callback_query: CallbackQuery,
    state: FSMContext
):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""

    selected_option = callback_query.data

    if selected_option == 'notification_no':
        user_data = await state.get_data()
        level = user_data.get('level')
        create_or_update_account(
            user_tg_id=callback_query.from_user.id,
            level=level,
            notification=0,
            notification_time='8:00'
        )
        await callback_query.message.answer(
            text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.',
            reply_markup=power_keyboard()
        )

    elif selected_option == 'notification_yes':
        await state.update_data(notification=1)
        await callback_query.message.edit_text(
            text='–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —É–¥–æ–±–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?',
            reply_markup=time_keyboard()
        )


@router.callback_query(lambda cq: cq.data.startswith('time_'))
async def process_notification_time_selection(
    callback_query: CallbackQuery,
    state: FSMContext
):
    """–§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É."""

    await state.set_state(state=UserFMS.notification_time)
    data = str(callback_query.data)
    hour = int(re.findall(r'\d+', data)[0])
    await state.update_data(notification_time=f'{hour}:00')
    user_data = await state.get_data()
    level = user_data.get('level')
    notification_time = user_data.get('notification_time')
    await callback_query.message.edit_text(
        text='–û—Ç–ª–∏—á–Ω–æ üëå\n\n–ü—Ä–æ–≤–µ—Ä—å, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ?\n'
        f'–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {level}\n–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {notification_time}',
        reply_markup=done_or_not_keyboard()
        )


@router.callback_query(lambda cq: cq.data == 'edits')
async def edits(
    callback_query: CallbackQuery
):
    """–£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–±—É—é—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è."""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π ü¶æ', callback_data='edit_pushups'
            )],
            [InlineKeyboardButton(
                text='–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚è∞', callback_data='edit_notification'
            )]
        ]
    )
    await callback_query.message.answer(
        text='–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?',
        reply_markup=keyboard
    )


@router.callback_query(lambda cq: cq.data.startswith('edit_'))
async def edit_data(
    callback_query: CallbackQuery,
    state: FSMContext
):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."""

    if callback_query.data == 'edit_notification':
        await state.set_state(state=UserFMS.notification_time)
        await callback_query.message.edit_text(
            text='–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —É–¥–æ–±–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?',
            reply_markup=time_keyboard()
        )
    if callback_query.data == 'edit_pushups':
        await state.set_state(state=UserFMS.level)
        await callback_query.message.edit_text(
            text='–í—ã–±–µ—Ä–∏ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–ª–æ–¥–≥–æ—Ç–æ–≤–∫–∏ üëá',
            reply_markup=level_keyboard()
        )


@router.callback_query(lambda cq: cq.data == 'create_a_record')
async def add_data_in_data_base(
    callback_query: CallbackQuery,
    state: FSMContext
):
    """–ó–∞–ø–∏—Å—å –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""

    user_data = await state.get_data()
    level = user_data.get('level')
    notification = user_data.get('notification')
    notification_time = user_data.get('notification_time')
    create_or_update_account(
        user_tg_id=callback_query.from_user.id,
        level=level,
        notification=notification,
        notification_time=notification_time
    )
    await callback_query.message.answer(
        text='–ö–∞–π—Ñ.\n\n–ü–æ–∫–∞ –Ω–∞ —ç—Ç–æ–º –≤—Å—ë)',
        reply_markup=power_keyboard()
    )
    await state.clear()


@router.callback_query(lambda cq: cq.data == 'power')
async def send_power_phrases(
    callback_query: CallbackQuery
):
    """–ó–∞—Ä—è–¥ –±–æ–¥—Ä–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    words = os.getenv('POWER_WORDS').split(',')
    word = choice(words)
    await callback_query.message.edit_text(
        text=f'–¢–´ {word.upper()}!',
        reply_markup=power_keyboard()
    )


@router.message()
async def message_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."""
    await message.answer_sticker(
        sticker='CAACAgIAAxkBAAEInlhm7HsqaNeN-g'
        'YRHz4IwZGRcRjU1gACCU8AAv0-OUi0dANZez_9_jYE'
    )
